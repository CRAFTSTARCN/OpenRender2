set(TARGET_NAME OpenRenderRuntime)

file(GLOB_RECURSE HEADER_FILE_RT "*.h")
file(GLOB_RECURSE SOURCE_FILE_RT "*.cpp")

add_library(${TARGET_NAME} ${HEADER_FILE_RT} ${SOURCE_FILE_RT})

target_include_directories(${TARGET_NAME} PUBLIC ${ROOT_DIR})

set_target_properties(OpenRenderRuntime PROPERTIES FOLDER ${RENDER_FOLDER_NAME})

target_compile_options(${TARGET_NAME} PUBLIC "$<$<COMPILE_LANG_AND_ID:CXX,MSVC>:/permissive->")
target_compile_options(${TARGET_NAME} PUBLIC "$<$<COMPILE_LANG_AND_ID:CXX,MSVC>:/WX->")

if(NOT DEFINED ENV{VULKAN_SDK})
    message(FATAL_ERROR "No vulkan sdk installed")
endif()

set(VULKAN_SDK_DIR $ENV{VULKAN_SDK})
message(STATUS "VulkanSDK path: ${VULKAN_SDK_DIR}")

if(WIN32)
    set(VULKAN_LIB ${VULKAN_SDK_DIR}/lib/vulkan-1.lib)
    message(STATUS "WIN32 platform")
elseif(UNIX)
    if(APPLE)
        set(VULKAN_LIB ${VULKAN_SDK_DIR}/lib/libvulkan.1.dylib)
    else()
        set(VULKAN_LIB ${VULKAN_SDK_DIR}/lib/libvulkan.so.1)
    endif()
    
else()
    message(FATAL_ERROR "Platform not support")
endif()

target_include_directories(${TARGET_NAME} PUBLIC ${VULKAN_SDK_DIR}/include)
target_link_libraries(${TARGET_NAME} PUBLIC ${VULKAN_LIB})

target_link_libraries(${TARGET_NAME} PUBLIC assimp)
target_include_directories(${TARGET_NAME} PUBLIC ${THIRD_PARTY_DIR}/assimp/include)

target_link_libraries(${TARGET_NAME} PUBLIC glfw)
target_include_directories(${TARGET_NAME} PUBLIC ${THIRD_PARTY_DIR}/glfw/include)

target_link_libraries(${TARGET_NAME} PUBLIC json11)
target_include_directories(${TARGET_NAME} PUBLIC ${THIRD_PARTY_DIR}/json11)

target_link_libraries(${TARGET_NAME} PUBLIC spdlog)
target_include_directories(${TARGET_NAME} PUBLIC ${THIRD_PARTY_DIR}/spdlog/include)

target_include_directories(${TARGET_NAME} PUBLIC ${THIRD_PARTY_DIR}/stb)

target_include_directories(${TARGET_NAME} PUBLIC ${THIRD_PARTY_DIR}/VulkanMemoryAllocator/include)

target_include_directories(${TARGET_NAME} PUBLIC ${THIRD_PARTY_DIR}/glm)